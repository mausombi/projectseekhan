# -*- coding: utf-8 -*-
"""model copy 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U49xfP722aXZWrlbOUIewe4iOuL9csXJ
"""

#!pip install langchain-community==0.2.4 langchain==0.2.3 faiss-cpu==1.8.0 unstructured==0.14.5 unstructured[pdf]==0.14.5 transformers==4.41.2 sentence-transformers==3.0.1

import os

from langchain_community.llms import Ollama
from langchain.document_loaders import UnstructuredFileLoader
from langchain_community.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.chains import RetrievalQA
import random
#for extracting PDF
from langchain.document_loaders import PyPDFLoader
from langchain.llms import Ollama
from fpdf import FPDF
import os


# loading the LLM
llm = Ollama(
    model="laddo",
    temperature=0,
    config={'extra_fields_behavior': 'allow'}  # Updated configuration for Ollama
)

# loading the document
loader = UnstructuredFileLoader("PP Unit 2 Tesseract.pdf")
documents = loader.load()

documents

# create document chunks
text_splitter = CharacterTextSplitter(separator="/n",
                                      chunk_size=7500,
                                      chunk_overlap=200)

text_chunks = text_splitter.split_documents(documents)

embeddings = HuggingFaceEmbeddings()

knowledge_base = FAISS.from_documents(text_chunks, embeddings)

# retrieval QA chain
qa_chain = RetrievalQA.from_chain_type(
    llm,
    retriever=knowledge_base.as_retriever())

Questions = input("Enter Noof Questions:")
Type = input("Enter the type (Mcqs/True or false/Fill in the blanks)")

Prompt = f"Generate {Questions} {Type}"

response = qa_chain.invoke({"query": Prompt})
print(response["result"])


# Function to save response to a PDF
def save_to_pdf(response, output_file):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.multi_cell(0, 10, response)
    pdf.output(output_file)
    print(f"Response saved to {output_file}")

# RAG Setup and PDF Saving
def main():
    # Example response for testing purposes
    # In a real scenario, you will be working with your RAG pipeline to get this result.
    result = response["result"]

    # Get current working directory to save the output PDF
    current_directory = os.getcwd()
    print(f"Saving PDF in directory: {current_directory}")

    x = random.randint(1, 1000)  # Use a larger range to reduce conflicts
    output_file = os.path.join(current_directory, f"{Type}_{Questions}_{x}.pdf")
    # Save result to PDF
    save_to_pdf(result, output_file)

# Run the main function
if __name__ == "__main__":
    main()
